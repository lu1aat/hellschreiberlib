#include "Arduino.h"
#include "Hell.h"

Hell::Hell(int pin) {
    pinMode(pin, OUTPUT);
    _pin = pin;
}

// 0-9 group is ASCII 48-57 located fom 25 to 35
// A-Z group is ASCII 65-90 located from 0 to 25
int hellSymbols[][7] = {
    {0x3E, 0x28, 0x28, 0x28, 0x3E},       // 0  A
    {0x7C, 0x54, 0x54, 0x54, 0x28},       // 1  B
    {0x3E, 0x22, 0x22, 0x22, 0x00},       // 2  C
    {0x3E, 0x22, 0x22, 0x22, 0x1C},       // 3  D
    {0x3E, 0x2A, 0x2A, 0x2A, 0x22},       // 4  E
    {0x3E, 0x28, 0x28, 0x28, 0x00},       // 5  F
    {0x3E, 0x22, 0x2A, 0x2A, 0x2E},       // 6  G
    {0x3E, 0x08, 0x08, 0x08, 0x3E},       // 7  H
    {0x00, 0x22, 0x3E, 0x22, 0x00},       // 8  I
    {0x06, 0x02, 0x02, 0x3E, 0x00},       // 9  J
    {0x3E, 0x08, 0x08, 0x14, 0x22},       // 10 K
    {0x3E, 0x02, 0x02, 0x02, 0x00},       // 11 L
    {0x3E, 0x20, 0x3E, 0x20, 0x3E},       // 12 M
    {0x3E, 0x20, 0x20, 0x3E, 0x00},       // 13 N
    {0x3E, 0x22, 0x22, 0x22, 0x3E},       // 14 O
    {0x3E, 0x28, 0x28, 0x38, 0x00},       // 15 P
    {0x3C, 0x24, 0x24, 0x3E, 0x02},       // 16 Q
    {0x3E, 0x28, 0x28, 0x2C, 0x3A},       // 17 R
    {0x3A, 0x2A, 0x2A, 0x2A, 0x2E},       // 18 S
    {0x20, 0x20, 0x3E, 0x20, 0x20},       // 19 T
    {0x3E, 0x02, 0x02, 0x02, 0x3E},       // 20 U
    {0x38, 0x04, 0x02, 0x04, 0x38},       // 21 V
    {0x3E, 0x02, 0x3E, 0x02, 0x3E},       // 22 W
    {0x22, 0x14, 0x08, 0x14, 0x22},       // 23 X
    {0x3A, 0x0A, 0x0A, 0x0A, 0x3E},       // 24 Y
    {0x22, 0x26, 0x2A, 0x32, 0x22},       // 25 Z
    {0x7C, 0x44, 0x54, 0x44, 0x7C},    // 26 0
    {0x10, 0x30, 0x3E, 0x3E, 0x00},    // 27 1
    {0x5C, 0x54, 0x54, 0x54, 0x74},    // 28 2
    {0x54, 0x54, 0x54, 0x54, 0x7C},    // 29 3
    {0x70, 0x10, 0x10, 0x10, 0x7C},    // 30 4
    {0x74, 0x54, 0x54, 0x54, 0x48},    // 31 5
    {0x7C, 0x54, 0x54, 0x54, 0x5C},    // 32 6
    {0x40, 0x40, 0x40, 0x40, 0x7C},    // 33 7
    {0x7C, 0x54, 0x54, 0x54, 0x7C},    // 34 8
    {0x74, 0x54, 0x54, 0x54, 0x7C}     // 35 9
};

// Tone
void Hell::tone() {
    digitalWrite(_pin, HIGH);
    delayMicroseconds(_toneDurationMicrosconds);
    digitalWrite(_pin, LOW);
}

// Transmite mensaje
void Hell::tx(char message[]) {
  // Iter over message characters
  for(byte i = 0; i < strlen(message); i++) {
    // Check for SPACE, DEC 32
    if(message[i] == 32) {
      delay(_wordSpacingMs);
      continue;
    }

    // Calculate character position in symbol table
    int symbolIndex = 0;
    int symbolShift = 65;
    if (message[i] < 58) {
        symbolShift = 22;
    }
    symbolIndex = message[i] - symbolShift;

    // Get symbols for this character, send signals by setting _pin into HIGH in the required intervals
    for(byte ii = 0; ii < _columns; ii++) {
      int column = 0;
      column = hellSymbols[symbolIndex][ii];

      // Iter over pixels
      int pix;
      for (pix = 1; pix <= 7; pix++) {
         if(bitRead(column, pix) == 1) {
            tone(); 
         } else {
            delayMicroseconds(_toneDurationMicrosconds);
         }
      }

    }

    // Delay between each character
    delay(_charDelay);
  }
}
